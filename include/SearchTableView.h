#ifndef SEARCHTABLEVIEW_H
#define SEARCHTABLEVIEW_H

#include <QTableView>
#include "SearchTableDelegate.h"
#include "SearchBoxView.h"

namespace Commissionator {

    /**
     *  Class creates a customized QTableView with a fixed search bar, 
     *   buttons on each row, and a few minor useability tweaks.
     */
    class SearchTableView : public QTableView {

        Q_OBJECT

    public:
        /**
         *  Constructor accepts a model to build a Search Table for.
         *
         *  @param model - Pointer to QAbstractItemModel based model on use
         *      for the proxy model and views.
         */
        SearchTableView(QAbstractItemModel *model);

        /**
         *  Destructor cleans up internal objects.
         */
        ~SearchTableView();

        /**
         *  Overrides default setColumnHidden function to call the same
         *  function with the same parameters on searchBox as well.
         */
        void setColumnHidden(int column, bool hide);
        

    protected:
        /**
         *  Initializes connections.
         *  Exists to allow for easier use of derived classes.
         */
        void createConnections();

        /**
         *  Initializes delegate.
         *  Exists to allow for easier use of derived classes.
         */
        void createDelegate();

        /**
         *  Initializes proxy.
         *  Exists to allow for easier use of derived classes.
         */
        void createProxy();

        /**
         *  Initializes search box.
         *  Exists to allow for easier use of derived classes.
         */
        void createSearchBox();

        /**
         *  Initializes table.
         *  Exists to allow for easier use of derived classes.
         */
        void createTable();

        /**
         *  Initializes the object and all its sub objects.
         */
        void init();

        /**
         *  Overrides the default moveCursor function so that the user can not
         *  use keyboard controls to navigate to the hidden top row.
         *
         *  @param cursorAction - the action that the function is analyzing
         *  @param modifiers - a list of keyboard modifiers that may be pressed
         *      (shift, ctrl, etc)
         *
         *  @return - the new QModelIndex generated by the function based on
         *      the current index and cursorAction
         */
        QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers) Q_DECL_OVERRIDE;

        /**
         *  Overrides the default resizeEvent function so that in addition to
         *  its normal use, it also calls updateSearchBoxGeometry()
         * 
         *  @param event - Pointer to QResizeEvent that describes the resize.
         */
        void resizeEvent(QResizeEvent *event) Q_DECL_OVERRIDE;

        /**
         *  Overrides the default scrollTo function to prevent the user from
         *  scrolling to the hidden row.
         *
         *  @param index - index that the table is scrolling to
         *  @param hint - hint as to how the scroll should occur
         */
        void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible) Q_DECL_OVERRIDE;

        /**
        *  Updates the size of the search box based on the dimensions of the
        *  search table.
        */
        void updateSearchBoxGeometry();

        //Proxy model that creates the search column and manages it
        FixedRowProxyModel *proxy;
        //Search box inherits from QTableView and provides additional functionality
        SearchBoxView *searchBox;
        //delegate that handles the icons displayed in on the table
        SearchTableDelegate *delegate;

    private slots:
        /**
         *  Updates the width of the a column in the search box whenever one is
         *  changed in the search table
         *
         *  @param logicalIndex - the logical index of the column that has been
         *      changed
         *  @param oldSize - int containing the old size in number of pixels
         *  @param newSize - int containing the new size in number of pixels
         */
        void updateSectionWidth(int logicalIndex, int oldSize, int newSize);

        /**
         *  Updates the height of the row the search box is in whenever the
         *  matching one is changed in the search table
         *
         *  @param logicalIndex - the logical index of the row that has been
         *      changed
         *  @param oldSize - int containing the old size in number of pixels
         *  @param newSize - int containing the new size in number of pixels
         */
        void updateSectionHeight(int logicalIndex, int oldSize, int newSize);

    signals:
        /**
         *  Signal that contains a search query.
         *  Use it by connecting it to your data model's search implementation
         *
         *  @param searchQuery - QList of QVariants containing the search query
         */
        void searchSignal(const QList<QVariant> searchQuery);

        /**
         *  Signal that is thrown when when one of the SearchTableDelegate
         *  icons was clicked.
         *  Use it by connecting it to your data model's function of choice
         *
         *   @param index - index whose button was clicked
         */
        void iconClicked(const QModelIndex &index);
    };
}
#endif